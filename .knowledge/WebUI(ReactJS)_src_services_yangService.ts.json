{"is_source_file": true, "format": "TypeScript", "description": "This file defines a YangService class that provides methods to interact with a backend API for managing YANG models, including CRUD operations, parsing, validation, comparison, and documentation generation.", "external_files": ["./api", "../types"], "external_methods": ["apiService.get", "apiService.post", "apiService.put", "apiService.delete", "apiService.upload"], "published": ["new YangService()"], "classes": [{"name": "YangService", "description": "A service class providing asynchronous methods to manage and interact with YANG models via API calls."}], "methods": [{"name": "getYangModels", "description": "Retrieve a paginated list of YANG models with optional search filtering."}, {"name": "getYangModel", "description": "Retrieve a specific YANG model by its ID."}, {"name": "createYangModel", "description": "Create a new YANG model with provided data."}, {"name": "updateYangModel", "description": "Update an existing YANG model identified by ID."}, {"name": "deleteYangModel", "description": "Delete a YANG model by its ID."}, {"name": "uploadYangModel", "description": "Upload a YANG model file to the server."}, {"name": "parseYangModel", "description": "Parse and validate YANG model content."}, {"name": "validateYangModel", "description": "Validate an existing YANG model by ID."}, {"name": "getYangModelDependencies", "description": "Retrieve dependencies for a specific YANG model."}, {"name": "getYangModelsByNamespace", "description": "Retrieve models by namespace URI."}, {"name": "getYangModelsByDevice", "description": "Retrieve models associated with a specific device ID."}, {"name": "searchYangModels", "description": "Search for YANG models with specific query and filters."}, {"name": "getYangModelTree", "description": "Get the tree structure for visualization of a YANG model."}, {"name": "getYangModelSchema", "description": "Retrieve the JSON schema representation of a YANG model."}, {"name": "compareYangModels", "description": "Compare two YANG models and return their differences."}, {"name": "generateDocumentation", "description": "Generate documentation for a YANG model in specified format."}, {"name": "exportYangModel", "description": "Export a YANG model in a chosen format."}, {"name": "importYangModels", "description": "Import multiple YANG model files."}, {"name": "getYangModelHistory", "description": "Retrieve version history of a YANG model."}], "calls": ["apiService.get", "apiService.post", "apiService.put", "apiService.delete", "apiService.upload"], "search-terms": ["YangModel", "parseYangModel", "validateYangModel", "getYangModelTree", "compareYangModels", "generateDocumentation", "importYangModels", "exportYangModel", "getYangModelHistory"], "state": 2, "file_id": 49, "knowledge_revision": 119, "git_revision": "6067738ee89e44c33086ceba4981ccd279a7ce5f", "ctags": [], "hash": "9bf4ef7e05bf6c0cc42f18819a4b27ce", "format-version": 4, "code-base-name": "WebUI(ReactJS)", "filename": "WebUI(ReactJS)/src/services/yangService.ts", "revision_history": [{"119": "6067738ee89e44c33086ceba4981ccd279a7ce5f"}]}